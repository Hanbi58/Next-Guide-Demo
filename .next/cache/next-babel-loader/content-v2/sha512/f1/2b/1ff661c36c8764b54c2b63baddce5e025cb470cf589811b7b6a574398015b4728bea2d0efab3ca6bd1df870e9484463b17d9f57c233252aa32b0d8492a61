{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\04_React_Guide\\\\23_2_NextMeetUp\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient } from \"mongodb\";\n\nfunction DetailsPage({\n  id,\n  title,\n  image,\n  address,\n  description\n}) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    id: id,\n    title: title.meetup.title,\n    image: image.meetup.image,\n    address: address.meetup.address,\n    description: description.meetup.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://hanbi58:hanbi@cluster0.vh7x03s.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetupCollection\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://hanbi58:hanbi@cluster0.vh7x03s.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetupCollection\");\n  const meetup = await meetupsCollection.findOne({\n    _id: Object(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      id: meetupId,\n      title: meetup.title,\n      image: meetup.image,\n      address: meetup.address,\n      description: meetup.description\n    }\n  };\n}\nexport default DetailsPage;","map":{"version":3,"sources":["D:/04_React_Guide/23_2_NextMeetUp/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","DetailsPage","id","title","image","address","description","meetup","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","params","meetupId","toString","getStaticProps","context","findOne","Object","props"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,SAASC,WAAT,CAAqB;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,KAAN;AAAaC,EAAAA,KAAb;AAAoBC,EAAAA,OAApB;AAA6BC,EAAAA;AAA7B,CAArB,EAAiE;AAC/D,sBACE,QAAC,YAAD;AACE,IAAA,EAAE,EAAEJ,EADN;AAEE,IAAA,KAAK,EAAEC,KAAK,CAACI,MAAN,CAAaJ,KAFtB;AAGE,IAAA,KAAK,EAAEC,KAAK,CAACG,MAAN,CAAaH,KAHtB;AAIE,IAAA,OAAO,EAAEC,OAAO,CAACE,MAAR,CAAeF,OAJ1B;AAKE,IAAA,WAAW,EAAEC,WAAW,CAACC,MAAZ,CAAmBD;AALlC;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;AAED,OAAO,eAAeE,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACnB,8FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,kBAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAad,MAAD,KAAa;AAC9Be,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEhB,MAAM,CAACS,GAAP,CAAWQ,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMd,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACnB,8FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,kBAAd,CAA1B;AACA,QAAMN,MAAM,GAAG,MAAMK,iBAAiB,CAACe,OAAlB,CAA0B;AAAEX,IAAAA,GAAG,EAAEY,MAAM,CAACL,QAAD;AAAb,GAA1B,CAArB;AACAd,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLW,IAAAA,KAAK,EAAE;AACL3B,MAAAA,EAAE,EAAEqB,QADC;AAELpB,MAAAA,KAAK,EAAEI,MAAM,CAACJ,KAFT;AAGLC,MAAAA,KAAK,EAAEG,MAAM,CAACH,KAHT;AAILC,MAAAA,OAAO,EAAEE,MAAM,CAACF,OAJX;AAKLC,MAAAA,WAAW,EAAEC,MAAM,CAACD;AALf;AADF,GAAP;AASD;AAED,eAAeL,WAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport { MongoClient } from \"mongodb\";\r\n\r\nfunction DetailsPage({ id, title, image, address, description }) {\r\n  return (\r\n    <MeetupDetail\r\n      id={id}\r\n      title={title.meetup.title}\r\n      image={image.meetup.image}\r\n      address={address.meetup.address}\r\n      description={description.meetup.description}\r\n    />\r\n  );\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://hanbi58:hanbi@cluster0.vh7x03s.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetupCollection\");\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n  client.close();\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const meetupId = context.params.meetupId;\r\n\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://hanbi58:hanbi@cluster0.vh7x03s.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetupCollection\");\r\n  const meetup = await meetupsCollection.findOne({ _id: Object(meetupId) });\r\n  client.close();\r\n\r\n  return {\r\n    props: {\r\n      id: meetupId,\r\n      title: meetup.title,\r\n      image: meetup.image,\r\n      address: meetup.address,\r\n      description: meetup.description,\r\n    },\r\n  };\r\n}\r\n\r\nexport default DetailsPage;\r\n"]},"metadata":{},"sourceType":"module"}